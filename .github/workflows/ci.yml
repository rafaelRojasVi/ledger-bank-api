# .github/workflows/ci.yml
name: mix-test + docker-build

on:
  push:
    branches: [main]
  pull_request:

jobs:
  test-and-build:
    runs-on: ubuntu-latest

    env:
      MIX_ENV: test
      DB_HOST: localhost            # host â†” container
      DB_USER: postgres
      DB_PASS: postgres
      DB_NAME: ledger_bank_api_test
      JWT_SECRET: "test-secret-key-for-testing-only-must-be-64-chars-long"
      HEX_HTTP_TIMEOUT: 20

    steps:
      # 1) Checkout code
      - uses: actions/checkout@v4

      # 2) Cache deps and _build to speed things up
      - uses: actions/cache@v4
        with:
          path: |
            ~/.mix
            deps
            _build
          key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}

      # 3) Install Erlang/Elixir
      - uses: erlef/setup-beam@v1
        with:
          elixir-version: '1.18.4'
          otp-version: '26.2'

      # 4) Start services with health dependencies
      - name: Start services with health checks
        run: |
          # Start db and redis services
          docker compose up -d db redis
          
          # Wait for services to be healthy using compose health dependencies
          echo "Waiting for services to be healthy..."
          docker compose ps
          
          # Wait for db to be healthy
          timeout 60 bash -c 'until docker compose ps db | grep -q "healthy"; do sleep 2; done'
          echo "Database is healthy"
          
          # Wait for redis to be healthy  
          timeout 60 bash -c 'until docker compose ps redis | grep -q "healthy"; do sleep 2; done'
          echo "Redis is healthy"

      # 6) Fetch deps, create DB, migrate, test
      - run: mix deps.get
      - run: mix format --check-formatted
      - run: mix compile --warnings-as-errors
      - run: mix ecto.create
      - run: mix ecto.migrate
      - run: mix test --warnings-as-errors

      # 7) Test health dependencies by starting web service
      - name: Test service health dependencies
        run: |
          echo "Testing service health dependencies..."
          # Start web service which depends on db and redis being healthy
          timeout 120 docker compose up --abort-on-container-exit web
          echo "Web service started successfully with health dependencies"

      # 8) Build your Docker image (optional)
      - name: Build app image
        run: docker compose build --pull
